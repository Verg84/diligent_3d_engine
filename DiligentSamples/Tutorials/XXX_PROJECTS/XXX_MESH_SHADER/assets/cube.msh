#include"structures.fxh"

cbuffer cbConstants
{
	Constants g_Constants;
}

cbuffer cbCubeData
{
	CubeData g_CubeData;
}

struct PSInput
{
	float4 Pos:SV_POSITION;
	float4 Color:COLOR;
	float2 UV:TEXCOORD;
};

float4 Rainbow(float factor)
{
	float h=factor/1.35f;
	float col=float3(abs(h*6.0-3.0)-1.0,2.0-abs(h*6.0-2.0),2.0-abs(h*6.0-4.0));
	return float4(clamp(col,float3(0.0,0.0,0.0),float3(1.0,0.0,0.0)),1.0);
}

[numthreads(24,1,1)]
[outputtopology("triangle")]
void main(
	in uint I:SV_GroupIndex,
	in uint gid:SV_GroupID,
	in payload Payload payload,
	out indices uint3 tris[12],
	out vertices PSInput verts[24])
{
	SetMeshOuputCounts(24,12);
	
	float3 pos;
	float scale=payload.Scale[gid];
	float LOD=payload.LODs[gid];
	pos.x=payload.PosX[gid];
	pos.y=payload.PosY[gid];
	pos.z=payload.PosZ[gid];

	verts[I].Pos=mul(float4(pos+g_CubeData.Positions[I].xyz*scale,1.0),g_Constants.ViewProjMat);
	vertes[I].UV=g_CubeData.UVs[I].xy;
	verts[I].Color=Rainbow(LOD);
	if(I<12)
	{
		tris[I]=g_CubeData.Indices[I].xyz;
	}

}

